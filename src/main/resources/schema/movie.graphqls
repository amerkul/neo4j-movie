type Movie {
    id: Long
    tagline: String
    title: String
    released: Int
    roles: [Role]
    reviews: [Person]
    directors: [Person]
    writers: [Person]
    producers: [Person]
}

type Role {
    id: Long!
    roles: [String!]!
    targetMovie: Person
}

type Person {
    id: Long
    born: Int
    name: String
    follows: [Person]
}

type Query {
    movies: [Movie]
    people: [Person]
    movieByTitle(title: String!): Movie
    movieByReleasedBetween(from: Int!, to: Int!): [Movie!]
    personByName(name: String!): Person
    countMovies: Int!
}

type Mutation {
    newMovie(input: MovieInput!): Movie
    newPerson(input: PersonInput!): Person
    updateMovie(update: MovieUpdate!): Movie
    updatePerson(update: PersonUpdate!): Person
    deletePerson(id: Int!): String
    deleteMovie(id: Int!): String
    moviesByPersonActedIn(name: String!): [Movie!]
    createFollowing(update: PersonUpdate!, followingName: String!): Person
}

input MovieInput {
    tagline: String!
    title: String!
    released: Int!
}

input MovieUpdate {
    id: Long
    tagline: String
    title: String
    released: Int
    roles: [RoleUpdate]
    reviews: [PersonUpdate]
    directors: [PersonUpdate]
    writers: [PersonUpdate]
    producers: [PersonUpdate]
}

input PersonInput {
    born: Int!
    name: String!
}

input PersonUpdate {
    id: Long!
    born: Int
    name: String
}

input RoleUpdate {
    roles: [String!]!
    targetPerson: PersonUpdate
}

scalar Long
